### Using detectRUNS 0.9.6
# clear workplace
rm(list =ls())

install.packages("detectRUNS")

library(detectRUNS)


#Exportar Mantenern los archivos localmente usando la direccion del mismo
#Estos Archivos ped y map fueron sometidos a control de calidad desde su archivo
#original 
genotypeFilePath <- file.path("C:/Users/villa/OneDrive/Documents/PLINK10K/DETECTRUNS/criolloQC.ped")

mapFilePath <- file.path("C:/Users/villa/OneDrive/Documents/PLINK10K/DETECTRUNS","CriolloQC.map")

#sliding-window-based run detection
## The function slidingRUNS.run() accepts in input several parameters: besides the paths 
##(or names) of ped/map files, there are parameters related to the sliding window and 
##parameters related to the genomic run

slidingRuns <- slidingRUNS.run(
  genotypeFile = genotypeFilePath, 
  mapFile = mapFilePath, 
  windowSize = 15, 
  threshold = 0.05,
  minSNP = 20, 
  ROHet = FALSE, 
  maxOppWindow = 1, 
  maxMissWindow = 1,
  maxGap = 10^6, 
  minLengthBps = 250000, 
  minDensity = 1/10^3, # SNP/kbps
  maxOppRun = NULL,
  maxMissRun = NULL
) 

#Exportar tabla ROHom
library(openxlsx)
ROHom <- slidingRuns
write.xlsx(ROHom, "ROHom1.xlsx")
write.xlsx(ROHom, "ROHom_tabla1.xlsx", as.table=TRUE)

#consecutive SNP-based run detection
##The function consecutiveRUNS.run() has a similar structure, obviously without the 
##sliding-window parameters.

consecutiveRuns <- consecutiveRUNS.run(
  genotypeFile =genotypeFilePath,
  mapFile = mapFilePath,
  minSNP = 20,
  ROHet = FALSE,
  maxGap = 10^6,
  minLengthBps = 250000,
  maxOppRun = 1,
  maxMissRun = 1
)

# "Runs of heterozygosity" (a.k.a. heterozygosity-rich regions)
##By setting ROHet=TRUE, runs of heterozygosity (a.k.a. heterozygosity-rich genomic regions) 
##are detected instead. Again, the usert can choose whether to use the sliding-window or the 
##consecutive method.

slidingRuns_het <- slidingRUNS.run(
  genotypeFile = genotypeFilePath, 
  mapFile = mapFilePath, 
  windowSize = 10, 
  threshold = 0.05,
  minSNP = 10, 
  ROHet = TRUE, 
  maxOppWindow = 2, 
  maxMissWindow = 1,
  maxGap = 10^6, 
  minLengthBps = 10000, 
  minDensity = 1/10^6, # SNP/kbps
  maxOppRun = NULL,
  maxMissRun = NULL
) 

#Exportar tabla ROHet
library(openxlsx)
ROHet <- slidingRuns_het
write.xlsx(ROHet, "ROHet.xlsx")
write.xlsx(ROHet, "ROHet_tabla.xlsx", as.table=TRUE)

consecutiveRuns_het <- consecutiveRUNS.run(
  genotypeFile =genotypeFilePath,
  mapFile = mapFilePath,
  minSNP = 10,
  ROHet = FALSE,
  maxGap = 10^6,
  minLengthBps = 10000,
  maxOppRun = 2,
  maxMissRun = 1
)

#Summary statistics on detected runs
##The function summaryRuns() takes in input the dataframe with results from runs 
##detection and calculates a number of basic descriptive statistics on runs. Additional 
##necessary parameters are the paths to the Plink ped and map files. Class and snpInRuns 
##are optional arguments.


summaryList <- summaryRuns(
  runs = slidingRuns, mapFile = mapFilePath, genotypeFile = genotypeFilePath, 
  Class =2 , snpInRuns = TRUE)

#Exportar tabla summary List
library(openxlsx)
write.xlsx(summaryList, "summaryList.xlsx")

#SUMARIO DE ROH
summaryList
summaryList$summary_ROH_count

summaryList$summary_ROH_mean_chr

## PARA CALCULAR LA LONGITUD MEDIA DE ROH POR CATEGORIAS
## Load necessary libraries
library(dplyr)
library(readxl)

# Read the data (adjust the path to your file)
data <- read_excel("ROHom1.xlsx")

# Convert length from bps to Mb
data$lengthMb <- data$lengthBps / 1000000

# Define the categories
bins <- c(0, 2, 4, 8, 16, Inf)
labels <- c('0-2 Mb', '2-4 Mb', '4-8 Mb', '8-16 Mb', '>16 Mb')

# Categorize the data
data$length_category <- cut(data$lengthMb, breaks = bins, labels = labels, right = FALSE)

# Group by population and length category, then calculate the mean
grouped_data <- data %>%
  group_by(group, length_category) %>%
  summarize(mean_length_Mb = mean(lengthMb))

## Print the results
print(grouped_data)

write.xlsx(grouped_data, "processed_ROH_data.xlsx")


#Exportar tabla tablaROHmean
summaryList$summary_ROH_mean_class
tablaROHmean<-summaryList$summary_ROH_mean_class
library(openxlsx)
write.xlsx(tablaROHmean, "tablaROHmean.xlsx")

summaryList$result_Froh_class


#Exportar tabla tablaFrohClass
tablaFrohClass <-summaryList$result_Froh_class
library(openxlsx)
write.xlsx(tablaFrohClass, "Froh_class.xlsx")

summaryList$SNPinRun

head(summaryList$SNPinRun)




plot_Runs(runs = slidingRuns)
plot_StackedRuns(runs = slidingRuns)

#POR RAZA
plot_SnpsInRuns(
  runs = slidingRuns[slidingRuns$group=="GUY",], genotypeFile = genotypeFilePath, 
  mapFile = mapFilePath)

plot_SnpsInRuns(
  runs = slidingRuns[slidingRuns$chrom==29,], genotypeFile = genotypeFilePath, 
  mapFile = mapFilePath)

topRuns <- tableRuns(
  runs =  slidingRuns, genotypeFile = genotypeFilePath, mapFile = mapFilePath, 
  threshold = 0.2)

#Exportar tabla topRuns
library(openxlsx)
write.xlsx(topRuns, "topRuns3.xlsx")

#MANHATTAN PLOT %SNP POR CROMOSOMA DE RAZAS
plot_manhattanRuns(
  runs = slidingRuns[slidingRuns$group=="GUA",], 
  genotypeFile = genotypeFilePath, mapFile = mapFilePath)
 

## End(Not run)
# loading pre-calculated data
runsFile <- system.file("extdata", "sliding.criollo.csv", package="detectRUNS")
runsDF <- readExternalRuns(inputFile = runsFile, program = 'detectRUNS')

#GraficaS TIPO "ChrBarPlot", "ChrBoxPlot" o "FrohBoxPlot"
plot_InbreedingChr(runs = runsDF, mapFile = mapFilePath, style='ChrBarPlot')

#TABULACION DE FROH POR CROMOSOMA Y POR INDIVIDUO
Froh_inbreeding(runs =runsDF, mapFile=mapFilePath, genome_wide = TRUE)

#EXPORTACION A TABLA XLSX
library(openxlsx)
sliding.criollo <- slidingRuns
write.xlsx(sliding.criollo, "sliding.criollo.xlsx")
write.xlsx(sliding.criollo, "sliding.criollo_tabla.xlsx", as.table=TRUE)
